{"version":3,"sources":["components/socket-tab-items/socketTabItems.js","pages/main-page/index.js"],"names":["SocketTabItem","props","startSocket","url","state","socketUrl","socket","close","setState","message","io","transports","on","a","status","this","data","console","log","error","connectEvent","event","saveSocket","map","item","name","isJson","val","push","text","DataReturn","eventName","is_JSON","type","scrollDown","str","Function","e","addEvent","connected","length","values","find","datares","alert","newevent","handler","target","value","removeItem","index","findIndex","splice","Url","update","sendMesssage","is_active","sendEvent","messageText","emit","clearAll","changeEventStatus","checked","closeSocket","setTimeout","document","getElementById","scrollIntoView","socketName","show","id","className","htmlFor","placeholder","onChange","onClick","autoComplete","rows","key","defaultChecked","style","fontSize","src","collapsed","role","JSON","stringify","Component","connect","global","Global","Dashboard","DataVal","active","removeTab","activeItem","activeTab","currentTab","addNewTab","Math","random","updateData","lenght","title"],"mappings":"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","file":"static/js/4.18c4dc76.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport ReactJson from 'react-json-view'\r\n// import {dashboard} from './../../action/actions';\r\nimport io from 'socket.io-client';\r\nimport './style.css';\r\n\r\n//let socket;\r\n\r\nclass SocketTabItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      data: {}, status: false, newevent: '', Url: '', error: '', sendEvent:'', messageText:'', message:[],  socketUrl:''\r\n    };    \r\n    this.socket = this.props.socketName;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({data:this.props.data, Url:this.props.data.url});\r\n  }\r\n \r\n  UNSAFE_componentWillReceiveProps(props){\r\n    if(props.show !== this.state.data.id)\r\n      this.setState({status: false})\r\n    return true\r\n  }\r\n\r\n\r\n  startSocket = (url) => {\r\n    if(url !== this.state.socketUrl && this.state.socketUrl !== ''){\r\n      this.socket.close();\r\n      this.setState({ message: [] });\r\n    }\r\n    this.setState({socketUrl:url});\r\n    this.socket = io(url, {transports: ['websocket']});\r\n    this.socket.on('connect', async (message)=> {\r\n      this.setState({ status: true });\r\n    });\r\n\r\n    this.socket.on('error', (data) => { console.log(data); this.setState({ error: data, status: false }) });\r\n    this.socket.on('desconnect', (data) => {console.log(data); this.setState({ error: data, status: false }) });\r\n    this.socket.on('connect_error', (data) => {console.log(data); this.setState({ error: data, status: false }) });\r\n    this.connectEvent(this.state.data.event)\r\n    \r\n    //change tab name\r\n    this.saveSocket()\r\n  }\r\n\r\n  connectEvent=(data)=>{\r\n    //console.log('data', data)\r\n    data.map(item=>{\r\n      if(item.status === true)\r\n      {return this.socket.on(item.name, async (data) =>{ \r\n        let isJson = this.isJson(data)\r\n        // console.log('event val connectEvent', JSON.stringify(data), isJson)\r\n        let val = this.state.message;\r\n        val.push({text:isJson? this.DataReturn(data):data, eventName:item.name, is_JSON:isJson, type:'receiver'})\r\n        this.setState({message:val})\r\n        this.scrollDown()\r\n      });\r\n      }\r\n      else return true;\r\n    })\r\n  }\r\n\r\n  // this.DataReturn(data)\r\n  DataReturn(val) {\r\n    if(typeof(val) === 'object'){\r\n      return val\r\n    }\r\n    return new Function(\"return \" + val)();\r\n  };\r\n\r\n  isJson=(str)=>{\r\n    try { \r\n      if(typeof(str) === 'object'){\r\n        return true\r\n      }\r\n      let dataval = (new Function(\"return [\" + str+ \"];\")())\r\n      return typeof(dataval) === 'object' ? true: false;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  addEvent = (item) => {\r\n    this.setState({message:[]})\r\n    const is_active = this.socket ? this.socket.connected || this.state.status || this.state.message.length !== 0 : false;\r\n    if(is_active)\r\n    {\r\n      let values = this.state.data;\r\n      if(values.event.find(datares=> datares.name === item))\r\n      {return alert('event name already added')}\r\n\r\n      values.event.push({ name: item, status: true })\r\n      this.setState({ data: values, newevent: '' })\r\n      this.connectEvent(values.event)\r\n      // this.socket.on(item, async (data) =>{ \r\n      //   console.log('add event connect',data)\r\n      //   let val = this.state.message;\r\n      //   val.push({text:data, eventName:item, sendEvent:this.state.sendEvent})\r\n      //   this.setState({message:val})\r\n      // });\r\n    }\r\n    else{\r\n      alert('connect socket first')\r\n    }\r\n  }\r\n\r\n  handler = (e) => this.setState({ [e.target.name]: e.target.value });\r\n  removeItem = (item) => {\r\n    let values = this.state.data;\r\n    let index = values.event.findIndex(val => val.name === item.name)\r\n    values.event.splice(index, 1)\r\n    this.setState({ data: values, message:[]})\r\n    this.socket.close();\r\n    this.startSocket(this.state.Url);\r\n  }\r\n\r\n  saveSocket = () => { //data\r\n    let data = this.state.data;\r\n    data.url = this.state.Url;\r\n    this.props.update(data);\r\n  }\r\n\r\n  // Send message\r\n  sendMesssage=()=>{\r\n    //console.log('send message',this.state.messageText)\r\n    const is_active = this.socket ? this.socket.connected || this.state.status || this.state.message.length !== 0 : false;\r\n    if(this.state.sendEvent && this.state.messageText !== '' && is_active)\r\n    {\r\n      this.socket.emit(this.state.sendEvent, this.state.messageText);\r\n      let isJson = this.isJson(this.state.messageText)\r\n      let val = this.state.message;\r\n      val.push({text:isJson? this.DataReturn(this.state.messageText):this.state.messageText,sendEvent:this.state.sendEvent, is_JSON:isJson, type:'sender'})\r\n      this.setState({message:val})\r\n      this.scrollDown()\r\n    }\r\n    else alert(is_active ?'Please enter valid value in send event or message field':'connect socket')\r\n  }\r\n\r\n  clearAll=()=>{\r\n    this.setState({sendEvent:'', messageText:''})\r\n  }\r\n\r\n  changeEventStatus=(item, val)=>{\r\n    let values = this.state.data;\r\n    let index = values.event.findIndex(val => val.name === item.name)\r\n    values.event[index].status = val.target.checked;\r\n    this.setState({data:values, message:[]})\r\n    this.closeSocket()\r\n    this.startSocket(this.state.Url);\r\n  }\r\n\r\n  scrollDown=()=>{\r\n    setTimeout(()=>document.getElementById(\"scroll\").scrollIntoView(false),100)\r\n  }\r\n\r\n  closeSocket=()=>{\r\n    const is_active = this.socket ? this.socket.connected || this.state.status || this.state.message.length !== 0 : false;\r\n    if(is_active)\r\n      this.socket.close();\r\n    this.setState({ status: false,  message:[]});\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    this.closeSocket()\r\n  }\r\n\r\n  render() {\r\n    //console.log(this.props, this.state, this.socket)\r\n    const { data, status, newevent, Url, error, sendEvent, messageText, message} = this.state;\r\n    const { show, socketName } = this.props;\r\n    const event = data.event ? data.event : [];\r\n    const is_active = this.socket ? this.socket.connected || status || message.length !== 0 : false;\r\n    return (\r\n      <div className={(show === data.id ? '' : 'd-none') + \" tabitem\"}>\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <label htmlFor={\"socketurl\"+socketName} className=\"m-0 d-none\"></label>\r\n              <div className=\"input-group mb-3\">\r\n                <div className=\"input-group-prepend\">\r\n                  <div className=\"input-group-text\" id=\"btnGroupAddon\">\r\n                    <i className={(is_active ? 'text-primary' : 'text-gray') + \" material-icons\"}>signal_wifi_4_bar</i>\r\n                    {/* <!-- sync_alt --> */}\r\n                  </div>\r\n                </div>\r\n                <input id={\"socketurl\"+socketName} type=\"text\" className=\"form-control\" placeholder=\"Socket Url\" value={Url} name=\"Url\" onChange={this.handler} />\r\n                <div className=\"input-group-append\">\r\n                  {is_active ? <button className=\"btn btn-silver\" type=\"button\" id=\"button-addon2\" onClick={() => this.closeSocket()}>Disconnect</button> : <button className=\"btn btn-primary\" type=\"button\" id=\"button-addon2\" onClick={() => this.startSocket(Url)}>Connect</button>}\r\n                  {/* <button className=\"btn btn-primary\" type=\"button\" id=\"button-addon2\" onClick={() => this.saveSocket(data)}>Save</button> */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={(status ? '' : '') + \" row mx-n1\"}>\r\n            {/*d-none <!-- Left side --> */}\r\n            <div className=\"col-sm-4 col-md-3 p-1\">\r\n              <div className=\"p-2 bg-light leftside shadow-sm\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor={\"senedvent\"+socketName}>Send Message</label>\r\n                  <input id={\"senedvent\"+socketName} className=\"form-control\" placeholder=\"Event Name\" value={sendEvent} name=\"sendEvent\" onChange={this.handler} autoComplete=\"false\"/>\r\n                  {/* <!-- <small id=\"emailHelp\" className=\"form-text text-muted\">Select event.</small> --> */}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor={\"messagetxt\"+socketName}>Message</label>\r\n                  <textarea id={\"messagetxt\"+socketName} className=\"form-control\" rows=\"5\" placeholder=\"Message\" name=\"messageText\" value={messageText} onChange={this.handler}></textarea>\r\n                </div>\r\n                <div className=\"row mx-n1 \">\r\n                  <div className=\"col-8 mb-1 p-1\">\r\n                    <button className=\"btn btn-primary btn-block\" onClick={this.sendMesssage}>Send Message</button>\r\n                  </div>\r\n                  <div className=\"col-4 mb-1 p-1\">\r\n                    <button className=\"btn btn-danger btn-block\" onClick={this.clearAll}>Clear</button>\r\n                  </div>\r\n                  <div className=\"col-12 p-1\">\r\n                    <button className=\"btn btn-white text-danger p-0\" onClick={()=>this.setState({message:[]})}>Clear all message</button>\r\n                  </div>\r\n                </div>\r\n\r\n                <hr />\r\n                <label htmlFor={\"recevent\"+socketName} className=\"m-0 d-none\"></label>\r\n                <div className=\"input-group \">\r\n                  <input id={\"recevent\"+socketName} type=\"text\" className=\"form-control\" value={newevent} name=\"newevent\" placeholder=\"Event Name\" onChange={this.handler} />\r\n                  <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-silver\" type=\"button\" onClick={() => this.addEvent(newevent)}>Add</button>\r\n                  </div>\r\n                </div>\r\n                <ul className=\"list-group mt-2\">\r\n                  {event.map((item, index) =>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center p-2\" key={index}>\r\n                      <div className=\"d-flex justify-content-between\">\r\n                        <label className=\"m-0 checkboxItem\">\r\n                            <input type=\"checkbox\" defaultChecked={item.status} onChange={(e)=>this.changeEventStatus(item, e)}/>\r\n                            <i className=\"material-icons\">stop</i>\r\n                        </label>\r\n                        {item.name}\r\n                      </div>\r\n                      <span className=\"d-flex\"><i className=\"material-icons\" onClick={() => this.removeItem(item)}>clear</i></span>\r\n                    </li>\r\n                  )}\r\n                </ul>\r\n\r\n              </div>\r\n            </div>\r\n\r\n            {/* <!-- Right side --> */}\r\n            <div className=\"col-sm-8 col-md-9 p-1 \">\r\n              <div className=\"p-2 bg-light shadow-sm h-100\">\r\n                <div className=\"mesgs\">\r\n                  {message.map((item,index)=>{\r\n                  if(item.type === \"receiver\"){\r\n                  return <div className=\"incoming_msg\" key={index}>\r\n                    <div className=\"userImage\">\r\n                      <span style={{fontSize: '8px'}}>{'Receiver'  /*item.eventName.slice(0, 2)*/}</span>\r\n                    </div>\r\n                    <div className=\"msgbox\">\r\n                      {item.is_JSON ? <pre><ReactJson src={item.text} collapsed={true} /></pre>:\r\n                      <pre><code>{item.text}</code></pre>}\r\n                      {/* typeof(item.text)===\"object\" ? JSON.stringify(item.text):  */}\r\n                      <span className=\"info_data\">{item.eventName}</span> </div>\r\n                  </div>\r\n                  }\r\n                  else{\r\n                    return <div className=\"outgoing_msg\" key={index}>\r\n                      <div className=\"sent_msg\">\r\n                          {item.is_JSON ? <pre><ReactJson src={item.text} collapsed={true} /></pre>:\r\n                          <pre><code>{item.text}</code></pre>}\r\n                          <span className=\"info_data\">{item.sendEvent}</span> </div>\r\n                        <div className=\"userImage\">\r\n                          <span style={{fontSize: '9px'}}>{'Sender'  /*item.eventName.slice(0, 2)*/}</span>\r\n                        </div>\r\n                    </div>\r\n                  }\r\n                  })}\r\n\r\n                  {!is_active ? <pre className=\"alert alert-danger\" role=\"alert\">{JSON.stringify(error || \"Call Socket Url\")}</pre>:''}\r\n\r\n                  <div id=\"scroll\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* <div className={(status ? 'd-none' : '') + \" row\"}>\r\n            <div className=\"col\">\r\n              <pre className=\"alert alert-danger\" role=\"alert\">{JSON.stringify(error || \"Call Socket Url\")}</pre>\r\n            </div>\r\n          </div> */}\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    global: state.Global,\r\n  };\r\n}\r\nexport default connect(mapStateToProps)(SocketTabItem);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport SocketTabItem from '../../components/socket-tab-items/socketTabItems'\r\nimport './style.css';\r\n\r\nconst data = [\r\n    //{id:0, url:'https://socket-io-chat.now.sh/', event: [{ name: 'new message', status: true }]},\r\n    //{id:0, url:'http://10.10.30.110:4000/', event: [{ name: 'testSocketAck', status: true }]},\r\n    // { id: 0, url: 'http://10.10.30.110:8086', event: [{ name: 'ajitres', status: true }] },\r\n    //{ id: 1, url: 'http://10.10.30.110:9000/', event: [{ name: 'startRoomAck', status: true },{ name: 'broadcast', status: true },] },    \r\n]\r\n\r\nclass Dashboard extends Component {\r\n    state = { DataVal: data, active: '' };\r\n\r\n    componentDidMount() {\r\n      \r\n      if( this.state.DataVal.lenght > 0)\r\n      { this.setState({ active: this.state.DataVal[0].id}) }\r\n      else\r\n      { this.addNewTab() }\r\n\r\n    }\r\n\r\n    // remove Tab \r\n    removeTab = (item) => {\r\n        let data = this.state.DataVal;                \r\n        let index = data.findIndex(val => val.id === item.id)\r\n        data.splice(index, 1)\r\n        this.setState({ DataVal: data })        \r\n        if (data.findIndex(val => val.id === this.state.active) === -1) {\r\n            let activeItem = data.length > 1 ? data[index - 1].id : data[0].id;\r\n            setTimeout(() => this.activeTab(activeItem), 100);\r\n        }\r\n        else {\r\n            let currentTab = data[data.findIndex(val => val.id === this.state.active)].id;\r\n            setTimeout(() => this.activeTab(currentTab), 100);\r\n        }\r\n    }\r\n\r\n    // Add new Tab\r\n    addNewTab = () => {\r\n        let data = this.state.DataVal;\r\n        let id = Math.random();\r\n        data.push({ url: '', event: [], id: id })\r\n        this.setState({ DataVal: data, active: id })\r\n    }\r\n\r\n    // Update data\r\n    updateData = (item) => {\r\n        // console.log(item);\r\n        let data = this.state.DataVal;\r\n        let index = data.findIndex(val => val.id === item.id)\r\n        data[index].url = item.url;\r\n        this.setState({ DataVal: data })\r\n    }\r\n\r\n    // Active tab\r\n    activeTab=(id)=> this.setState({ active: id })\r\n\r\n    render() {\r\n        const { DataVal, active } = this.state;\r\n        return (\r\n            <div className=\"container-fluid pt-3 pb-3\">\r\n                <div className=\"card border-0\">\r\n                    <div className=\"card-header p-0 shadow-none bg-light\">\r\n                        <div className=\"tabboxs d-flex flex-row justify-content-start align-items-stretch\">\r\n                            <ul className=\"tabs d-flex flex-nowrap m-0 p-0\">\r\n                                {DataVal.map((item, index) => <li onClick={() => this.activeTab(item.id)} className={(active === item.id ? 'active' : '') + \" d-flex\"} key={item.id} title={item.url || 'Socket Url'}>\r\n                                    <span>{item.url || 'Socket Url'}</span>\r\n                                    {DataVal.length > 1 ? <i className=\"material-icons\" onClick={() => this.removeTab(item)}>clear</i>:''}\r\n                                </li>)}\r\n                            </ul>\r\n                            <div className=\"addtabs\">\r\n                                <i className=\"bg-silver text-white material-icons\" onClick={this.addNewTab}>add</i>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-body pl-0 pr-0\">\r\n                        {DataVal.map((item, index) =>\r\n                            <SocketTabItem data={item} show={active} update={this.updateData} key={item.id} className=\"customshow\" socketName={'socket'+item.id}/>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        global: state.Global,\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(Dashboard);"],"sourceRoot":""}